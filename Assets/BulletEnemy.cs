using UnityEngine;

/// <summary>
/// Bala usada por el enemigo escapista.
/// Se mueve en una direcci√≥n espec√≠fica y aplica da√±o al jugador.
/// Aplica diferente cantidad de da√±o dependiendo del estado del enemigo (activo o cansado).
/// </summary>
public class BulletEnemy : MonoBehaviour
{
    [Header("Da√±o de la Bala")]
    [Tooltip("Da√±o cuando el enemigo est√° en estado activo.")]
    public float damageActivo = 5f;

    [Tooltip("Da√±o cuando el enemigo est√° en estado cansado.")]
    public float damageCansado = 2f;

    [Header("Configuraci√≥n de Vida")]
    [Tooltip("Tiempo de vida de la bala antes de destruirse autom√°ticamente.")]
    public float lifeTime = 5f;

    /// <summary>Velocidad de la bala en el espacio.</summary>
    private Vector3 velocity;

    /// <summary>Indica si el enemigo que dispar√≥ la bala estaba cansado (afecta el da√±o).</summary>
    private bool isCansado = false;

    /// <summary>
    /// Se llama al iniciar. Destruye autom√°ticamente la bala despu√©s de cierto tiempo.
    /// </summary>
    void Start()
    {
        Destroy(gameObject, lifeTime); // ‚è±Ô∏è Autodestruye la bala despu√©s del tiempo establecido
    }

    /// <summary>
    /// Configura la direcci√≥n y velocidad de la bala, adem√°s del estado del enemigo.
    /// </summary>
    /// <param name="direction">Direcci√≥n en la que se mover√° la bala.</param>
    /// <param name="speed">Velocidad de desplazamiento.</param>
    /// <param name="cansado">Si el enemigo estaba en estado cansado.</param>
    public void SetDirection(Vector3 direction, float speed, bool cansado)
    {
        velocity = direction.normalized * speed;
        isCansado = cansado;
    }

    /// <summary>
    /// Mueve la bala en cada frame seg√∫n su velocidad.
    /// </summary>
    void Update()
    {
        transform.position += velocity * Time.deltaTime;
    }

    /// <summary>
    /// Detecta colisiones con otros objetos y aplica da√±o si impacta al jugador.
    /// </summary>
    /// <param name="other">Collider del objeto con el que colision√≥.</param>
    private void OnTriggerEnter(Collider other)
    {
        // ‚úÖ Si la bala impacta al jugador
        if (other.CompareTag("Player"))
        {
            Player player = other.GetComponent<Player>();
            if (player != null)
            {
                // Aplica el da√±o seg√∫n el estado del enemigo que dispar√≥
                float damage = isCansado ? damageCansado : damageActivo;
                player.TakeDamage(Mathf.RoundToInt(damage)); // üîÅ Convierte el da√±o a entero

                Debug.Log($"üî• Bala impact√≥ al jugador. Da√±o: {damage}");
            }

            Destroy(gameObject); // üí• Se destruye despu√©s de impactar
        }

        // ‚úÖ Si impacta con cualquier objeto que NO sea otro enemigo, tambi√©n se destruye
        if (!other.CompareTag("Enemy"))
        {
            Destroy(gameObject);
        }
    }
}
