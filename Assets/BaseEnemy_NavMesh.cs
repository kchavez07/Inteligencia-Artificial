using UnityEngine;

public class BaseEnemy : MonoBehaviour
{
    // Vida actual del enemigo.
    protected float currentHP;

    [SerializeField]
    protected float maxHP = 10; // Vida m√°xima del enemigo.

    [SerializeField]
    protected int attackDamage = 1; // Da√±o que inflige el enemigo al atacar.

    [SerializeField]
    protected float moveSpeed = 2f; // Velocidad de movimiento del enemigo.

    [SerializeField]
    protected float detectionRange = 50f; // Rango de detecci√≥n del jugador.

    [SerializeField]
    private LayerMask bulletLayer; // **Nueva variable para detectar balas usando LayerMask**

    // Componentes del enemigo.
    protected Rigidbody rb; // Referencia al Rigidbody del enemigo.
    protected Transform player; // Referencia al jugador.
    protected SteeringBehaviors steering; // üîπ Integraci√≥n con SteeringBehaviors para el movimiento.

    /// <summary>
    /// M√©todo Start: Inicializa el enemigo asignando sus componentes y verificando si el jugador existe en la escena.
    /// </summary>
    protected virtual void Start()
    {
        rb = GetComponent<Rigidbody>();
        rb.freezeRotation = true; // Evita que el Rigidbody rote autom√°ticamente.
        rb.useGravity = false; // Desactiva la gravedad para enemigos flotantes o a√©reos.

        currentHP = maxHP; // Inicializa la vida del enemigo.
        steering = GetComponent<SteeringBehaviors>(); // üîπ Verifica si este enemigo usa SteeringBehaviors.

        // Busca al jugador en la escena utilizando la etiqueta "Player".
        GameObject playerObject = GameObject.FindWithTag("Player");
        if (playerObject != null)
        {
            player = playerObject.transform; // Asigna la referencia del jugador.
        }
        else
        {
            Debug.LogError("‚ùå No se encontr√≥ el jugador. Aseg√∫rate de que el jugador tiene la etiqueta 'Player'.");
        }
    }

    /// <summary>
    /// M√©todo FixedUpdate: Maneja el movimiento del enemigo en cada frame de f√≠sica.
    /// </summary>
    protected virtual void FixedUpdate()
    {
        if (player == null) return; // Si no hay jugador, no hace nada.

        // üîπ Si el enemigo tiene SteeringBehaviors, delega el movimiento a ese script.
        if (steering != null)
        {
            steering.SetEnemyReference(player.gameObject); // Asegura que siga al jugador.
            return;
        }

        // üîπ Si NO tiene SteeringBehaviors, usa el movimiento normal basado en la distancia al jugador.
        float distanceToPlayer = Vector3.Distance(transform.position, player.position);
        if (distanceToPlayer <= detectionRange) // Si el jugador est√° dentro del rango de detecci√≥n.
        {
            Vector3 direction = (player.position - transform.position).normalized; // Calcula la direcci√≥n hacia el jugador.
            rb.MovePosition(rb.position + direction * moveSpeed * Time.fixedDeltaTime); // Mueve al enemigo en esa direcci√≥n.
        }
    }

    /// <summary>
    /// M√©todo para recibir da√±o.
    /// </summary>
    /// <param name="damage">Cantidad de da√±o recibido.</param>
    public void TakeDamage(float damage)
    {
        currentHP -= damage; // Reduce la vida del enemigo.
        Debug.Log($"{name} recibi√≥ {damage} de da√±o. HP restante: {currentHP}");

        if (currentHP <= 0) // Si la vida del enemigo llega a 0, muere.
        {
            Die();
        }
    }

    /// <summary>
    /// M√©todo para manejar la muerte del enemigo.
    /// </summary>
    protected virtual void Die()
    {
        Debug.Log($"{name} ha sido destruido."); // Mensaje de depuraci√≥n.
        Destroy(gameObject); // Elimina al enemigo de la escena.
    }

    /// <summary>
    /// M√©todo llamado cuando otro objeto entra en el √°rea de colisi√≥n del enemigo.
    /// </summary>
    /// <param name="other">Collider del objeto que entr√≥ en contacto.</param>
    private void OnTriggerEnter(Collider other)
    {
        // **1Ô∏è‚É£ Si es una bala, recibe da√±o**
        if (((1 << other.gameObject.layer) & bulletLayer) != 0)
        {
            Bullet bullet = other.GetComponent<Bullet>(); // Obtiene la referencia al script de la bala.
            if (bullet != null)
            {
                TakeDamage(bullet.GetDamage()); // Aplica el da√±o al enemigo.
                Destroy(other.gameObject); // Destruye la bala tras el impacto.
            }
        }

        // **2Ô∏è‚É£ Si el enemigo choca con el `Player`, inflige da√±o**
        if (other.CompareTag("Player")) // ‚¨ÖÔ∏è Verifica que el `Player` tiene el `Tag` correcto
        {
            Player playerScript = other.GetComponent<Player>(); // ‚¨ÖÔ∏è Obtiene el script `Player`
            if (playerScript != null)
            {
                playerScript.TakeDamage(attackDamage); // ‚úÖ Inflige da√±o al jugador
                Debug.Log($"‚ö†Ô∏è {gameObject.name} golpe√≥ al jugador. Le hizo {attackDamage} de da√±o.");
            }
        }
    }
}
