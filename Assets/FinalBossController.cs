using UnityEngine;

/// <summary>
/// Controlador de vida del jefe final.
/// Maneja da√±o, muerte y comunicaci√≥n con la barra de vida.
/// </summary>
public class FinalBossController : MonoBehaviour
{
    [Header("Configuraci√≥n de Vida")]
    public float maxHealth = 100f;
    public float currentHealth;

    private BossHealthBarController healthBar; // üî• Referencia para actualizar la barra

    private void Start()
    {
        currentHealth = maxHealth;

        // Buscar autom√°ticamente la barra de vida si no est√° asignada
        healthBar = FindObjectOfType<BossHealthBarController>();
        if (healthBar == null)
        {
            Debug.LogWarning("‚ö†Ô∏è No se encontr√≥ un BossHealthBarController en la escena.");
        }
    }

    /// <summary>
    /// Aplica da√±o al jefe final.
    /// </summary>
    /// <param name="damage">Cantidad de da√±o recibido.</param>
    public void TakeDamage(float damage)
    {
        currentHealth -= damage;
        currentHealth = Mathf.Clamp(currentHealth, 0, maxHealth);

        Debug.Log($"‚ö° Jefe recibi√≥ {damage} de da√±o. Vida restante: {currentHealth}");

        // Actualizar la barra de vida cada vez que recibe da√±o
        if (healthBar != null)
        {
            healthBar.UpdateHealthBar(currentHealth, maxHealth);
        }

        if (currentHealth <= 0)
        {
            Die();
        }
    }

    /// <summary>
    /// M√©todo que se llama cuando el jefe se queda sin vida.
    /// </summary>
    private void Die()
    {
        Debug.Log("üíÄ El jefe final ha muerto.");

        // üî• IMPORTANTE: Tambi√©n destruye el HUD de vida si existe
        if (healthBar != null)
        {
            Destroy(healthBar.gameObject); // Destruye el objeto de la barra visual
        }

        Destroy(gameObject); // Despu√©s destruye el jefe
    }
}
