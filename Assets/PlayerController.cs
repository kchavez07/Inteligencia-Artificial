using UnityEngine;

/// <summary>
/// Controlador del jugador. Maneja el movimiento y el disparo.
/// </summary>
public class PlayerController : MonoBehaviour
{
    [Header("Movimiento del Jugador")]
    public float moveSpeed = 5f; // Velocidad de movimiento del jugador.
    
    [Header("Disparo")]
    public GameObject bulletPrefab; // Prefab de la bala que dispara el jugador.
    public Transform firePoint; // Punto desde donde se disparan las balas.
    public float bulletSpeed = 10f; // Velocidad de la bala al ser disparada.

    private Rigidbody rb; // Referencia al Rigidbody del jugador.
    private Vector3 moveDirection; // Direcci√≥n en la que el jugador se mover√°.

    [Header("C√°mara")]
    public Transform cameraTransform; // üîπ Referencia a la c√°mara para ajustar el movimiento relativo a ella.

    /// <summary>
    /// M√©todo Start: Se ejecuta al iniciar el juego. 
    /// Inicializa el Rigidbody y bloquea el cursor dentro de la ventana.
    /// </summary>
    private void Start()
    {
        rb = GetComponent<Rigidbody>(); // Obtiene el Rigidbody del jugador.
        Cursor.lockState = CursorLockMode.Confined; // Bloquea el cursor dentro de la ventana del juego.
    }

    /// <summary>
    /// M√©todo Update: Se ejecuta cada frame. 
    /// Maneja el movimiento del jugador y la detecci√≥n del disparo.
    /// </summary>
    private void Update()
    {
        // üîπ Captura la entrada de movimiento del teclado (WASD).
        float moveX = Input.GetAxisRaw("Horizontal");
        float moveZ = Input.GetAxisRaw("Vertical");

        // üîπ Calcula la direcci√≥n de movimiento en funci√≥n de la c√°mara.
        Vector3 forward = cameraTransform.forward;
        Vector3 right = cameraTransform.right;

        forward.y = 0; // Se ignora el eje Y para evitar que el jugador se incline.
        right.y = 0;

        moveDirection = (forward * moveZ + right * moveX).normalized; // Normaliza la direcci√≥n para un movimiento uniforme.

        // üîπ Hace que el jugador siempre mire en la direcci√≥n en la que se mueve.
        if (moveDirection != Vector3.zero)
        {
            transform.forward = moveDirection;
        }

        // üîπ Detecta si el jugador presiona "Espacio" para disparar.
        if (Input.GetKeyDown(KeyCode.Space))
        {
            Shoot();
        }
    }

    /// <summary>
    /// M√©todo FixedUpdate: Se ejecuta en cada frame de f√≠sica.
    /// Aplica el movimiento del jugador con Rigidbody.
    /// </summary>
    private void FixedUpdate()
    {
        // üîπ Aplica el movimiento con la velocidad establecida, manteniendo la velocidad vertical.
        rb.linearVelocity = moveDirection * moveSpeed + new Vector3(0, rb.linearVelocity.y, 0);
    }

    /// <summary>
    /// M√©todo Shoot: Crea y dispara una bala en la direcci√≥n en la que el jugador est√° mirando.
    /// </summary>
    private void Shoot()
    {
        // üîπ Verifica que `firePoint` y `bulletPrefab` est√©n asignados antes de disparar.
        if (firePoint == null || bulletPrefab == null)
        {
            Debug.LogError("‚ùå Falta FirePoint o BulletPrefab en el PlayerController.");
            return;
        }

        // üîπ Instancia la bala en `firePoint`.
        GameObject bullet = Instantiate(bulletPrefab, firePoint.position, Quaternion.identity);

        // üîπ Obtiene el Rigidbody de la bala y le aplica velocidad en la direcci√≥n del jugador.
        Rigidbody bulletRb = bullet.GetComponent<Rigidbody>();
        if (bulletRb != null)
        {
            bulletRb.linearVelocity = transform.forward * bulletSpeed;
        }
    }
}
